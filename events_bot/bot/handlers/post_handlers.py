from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from typing import Union
import logfire
from sqlalchemy import select
from events_bot.database.services import PostService, CategoryService, CityService
from events_bot.database.models import Category
from events_bot.bot.states import PostStates
from events_bot.bot.keyboards import (
    get_main_keyboard,
    get_category_selection_keyboard,
    get_city_keyboard,
)
from events_bot.storage import file_storage
from loguru import logger
from datetime import timezone
from events_bot.bot.handlers.start_handler import MAIN_MENU_GIF_IDS
import random

router = Router()

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –¥–ª—è caption)
MAX_CONTENT_LENGTH = 800

def register_post_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    dp.include_router(router)


@router.message(F.text == "/create_post")
async def cmd_create_post(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_post"""
    await state.set_state(PostStates.creating_post)
    all_cities = await CityService.get_all_cities(db)
    await message.answer(
        "üéì –í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç(—ã) –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_city_keyboard(all_cities, for_post=True)
    )
    await state.set_state(PostStates.waiting_for_city_selection)


@router.message(F.text == "/cancel")
async def cmd_cancel_post(message: Message, state: FSMContext, db):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úñÔ∏è",
        reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data == "create_post")
async def start_create_post(callback: CallbackQuery, state: FSMContext, db):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    await state.set_state(PostStates.creating_post)
    all_cities = await CityService.get_all_cities(db)

    try:
        await callback.message.delete()
    except Exception as e:
        logfire.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await callback.message.answer(
        "üéì –í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç(—ã) –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_city_keyboard(all_cities, for_post=True),
    )
    await state.set_state(PostStates.waiting_for_city_selection)
    await callback.answer()


@router.callback_query(F.data == "cancel_post")
async def cancel_post_creation(callback: CallbackQuery, state: FSMContext, db):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ ‚Äî —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —á–µ—Ä–µ–∑ –≥–∏—Ñ–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await state.clear()

    try:
        await callback.message.delete()
    except Exception as e:
        logfire.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")

    if MAIN_MENU_GIF_IDS:
        selected_gif = random.choice(MAIN_MENU_GIF_IDS)
        try:
            await callback.message.answer_animation(
                animation=selected_gif,
                caption="",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
            await callback.answer()
            return
        except Exception as e:
            logfire.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")

    await callback.message.answer(
        "‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


@router.callback_query(PostStates.waiting_for_city_selection, F.data == "post_city_select_all")
async def select_all_cities_post(callback: CallbackQuery, state: FSMContext, db):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ / —Å–Ω—è—Ç—å –≤—Å–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞"""
    all_cities = await CityService.get_all_cities(db)
    all_city_ids = [c.id for c in all_cities]

    data = await state.get_data()
    selected_ids = data.get('selected_city_ids', [])

    if len(selected_ids) == len(all_city_ids):
        new_selection = []
        await callback.answer("–í—Å–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã —Å–Ω—è—Ç—ã")
    else:
        new_selection = all_city_ids
        await callback.answer("–í—Å–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã")

    await state.update_data(selected_city_ids=new_selection)

    await callback.message.edit_reply_markup(
        reply_markup=get_city_keyboard(all_cities, new_selection, for_post=True)
    )


@router.callback_query(PostStates.waiting_for_city_selection, F.data == "post_city_confirm")
async def confirm_city_selection(callback: CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    selected_ids = data.get('selected_city_ids', [])
    
    if not selected_ids:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
        return
    
    cities = await CityService.get_cities_by_ids(db, selected_ids)
    city_names = [c.name for c in cities]
    await state.update_data(post_city_names=city_names)
    
    all_categories = await CategoryService.get_all_categories(db)
    
    city_text = ", ".join(city_names)
    await callback.message.edit_text(
        f"–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã: {city_text}\n\n‚≠êÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_category_selection_keyboard(all_categories, for_post=True),
    )
    await state.set_state(PostStates.waiting_for_category_selection)
    await callback.answer()


@router.callback_query(PostStates.waiting_for_city_selection, F.data.startswith("post_city_"))
async def process_post_city_selection(callback: CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    city_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected_ids = data.get('selected_city_ids', [])
    
    if city_id in selected_ids:
        selected_ids.remove(city_id)
    else:
        selected_ids.append(city_id)
    
    await state.update_data(selected_city_ids=selected_ids)
    
    all_cities = await CityService.get_all_cities(db)
    await callback.message.edit_reply_markup(
        reply_markup=get_city_keyboard(all_cities, selected_ids, for_post=True)
    )
    await callback.answer()

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

@router.callback_query(PostStates.waiting_for_category_selection, F.data.startswith("post_category_"))
async def process_post_category_selection(callback: CallbackQuery, state: FSMContext, db):
    """–ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞"""
    category_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    category_ids = data.get("category_ids", [])

    if category_id in category_ids:
        category_ids.remove(category_id)
    else:
        category_ids.append(category_id)
    await state.update_data(category_ids=category_ids)

    all_categories = await CategoryService.get_all_categories(db)
    try:
        await callback.message.edit_text(
            "‚≠êÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=get_category_selection_keyboard(all_categories, category_ids, for_post=True),
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await callback.answer()


@router.callback_query(PostStates.waiting_for_category_selection, F.data == "confirm_post_categories")
@logger.catch
async def confirm_post_categories(callback: CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    category_ids = data.get("category_ids", [])
    if not category_ids:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
        return

    stmt = select(Category).where(Category.id.in_(category_ids))
    result = await db.execute(stmt)
    categories = result.scalars().all()

    if categories:
        category_names = [cat.name for cat in categories]
        category_list = ", ".join(category_names)
    else:
        category_list = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    await state.update_data(category_ids=category_ids)
    logfire.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {category_names}")

    try:
        await callback.message.edit_text(
            f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {category_list}\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

    await state.set_state(PostStates.waiting_for_title)
    logfire.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_title –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer()


@router.message(PostStates.waiting_for_title)
@logger.catch
async def process_post_title(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞"""
    logfire.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

    if len(message.text) > 100:
        await message.answer("√ó –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        return

    await state.update_data(title=message.text)
    logfire.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {message.text}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(PostStates.waiting_for_content)
    logfire.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_content –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")


@router.message(PostStates.waiting_for_content)
async def process_post_content(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    content = message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
    if len(content) > MAX_CONTENT_LENGTH:
        await message.answer(f"√ó –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_CONTENT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        return

    await state.update_data(content=content)
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://).\n\n–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É –∞–Ω–æ–Ω—Å—É:"
    )
    await state.set_state(PostStates.waiting_for_url)


@router.message(PostStates.waiting_for_url)
async def process_post_url(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 500 —Å–∏–º–≤–æ–ª–æ–≤"""
    url = None if message.text == "/skip" else message.text.strip()

    # –ü—Ä–æ–ø—É—Å–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω
    if url is None:
        await state.update_data(url=url)
        await message.answer(
            "üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2025 18:30)\n\n"
        )
        await state.set_state(PostStates.waiting_for_event_datetime)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(url) > 100:
        await message.answer(
            "√ó –°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ‚Äî –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ—ë (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ bit.ly) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫—É—é."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer(
            "√ó –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
    await state.update_data(url=url)
    await message.answer(
        "üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2025 18:30)\n\n"
    )
    await state.set_state(PostStates.waiting_for_event_datetime)


@router.message(PostStates.waiting_for_event_datetime)
async def process_event_datetime(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    from datetime import datetime, timedelta

    try:
        from zoneinfo import ZoneInfo
    except Exception:
        ZoneInfo = None

    text = message.text.strip()
    for fmt in ("%d.%m.%Y %H:%M", "%d.%m.%Y %H.%M"):
        try:
            event_dt = datetime.strptime(text, fmt)

            if ZoneInfo is not None:
                msk = ZoneInfo("Europe/Moscow")
                current_msk = datetime.now(msk).replace(tzinfo=None)
            else:
                current_utc = datetime.now(timezone.utc)
                current_msk = current_utc.replace(tzinfo=None) + timedelta(hours=3)

            min_future_time = current_msk + timedelta(minutes=30)

            if event_dt <= min_future_time:
                await message.answer(
                    "‚úñÔ∏è –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!\n"
                    f"–°–µ–π—á–∞—Å: {current_msk.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_future_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º."
                )
                return

            await state.update_data(event_at=event_dt.isoformat())
            await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∞–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            await state.set_state(PostStates.waiting_for_address)
            return
        except ValueError:
            continue
    await message.answer("‚úñÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 25.12.2025 18:30. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(PostStates.waiting_for_address)
async def process_post_address(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    address = message.text.strip()
    if len(address) > 200:
        await message.answer("√ó –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(address=address)
    await message.answer("üéÜ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(PostStates.waiting_for_image)


@router.message(PostStates.waiting_for_image)
async def process_post_image(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if message.text == "/skip":
        await continue_post_creation(message, state, db)
        return

    if not message.photo:
        await message.answer("√ó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
        return

    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    file_data = await message.bot.download_file(file_info.file_path)
    file_id = await file_storage.save_file(file_data.read(), "jpg")

    await state.update_data(image_id=file_id)
    await continue_post_creation(message, state, db)


@router.callback_query(PostStates.waiting_for_image, F.data == "skip_image")
async def skip_image_callback(callback: CallbackQuery, state: FSMContext, db):
    await continue_post_creation(callback, state, db)


async def continue_post_creation(callback_or_message: Union[Message, CallbackQuery], state: FSMContext, db):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = callback_or_message.from_user.id
    message = (
        callback_or_message
        if isinstance(callback_or_message, Message)
        else callback_or_message.message
    )
    data = await state.get_data()
    title = data.get("title")
    content = data.get("content")
    category_ids = data.get("category_ids", [])
    post_city_names = data.get("post_city_names", [])
    image_id = data.get("image_id")
    event_at_iso = data.get("event_at")
    url = data.get("url")
    address = data.get("address")

    if not all([title, content, category_ids, post_city_names]):
        await message.answer(
            "‚úñÔ∏è –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
        return

    post = await PostService.create_post_and_send_to_moderation(
        db=db,
        title=title,
        content=content,
        author_id=user_id,
        category_ids=category_ids,
        city_names=post_city_names,
        image_id=image_id,
        event_at=event_at_iso,
        url=url,
        address=address,
        bot=message.bot,
    )

    if post:
        await message.answer(
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –°–µ—Ä–¥—Ü–µ –∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ üëèü•≥",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
    else:
        await message.answer(
            "‚úñÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
